@page "/manage"

@using System.ComponentModel.DataAnnotations

@inject IWordService WordService
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime

@if (isPageLoaded)
{
    <div class="main-container">
        <div class="row">
            <div class="col s8" style="padding: 30px;">
                <h3>Words</h3>
                <div style="height: 20px;"></div>
                <table class="striped">
                    <thead>
                        <tr>
                            <th class="col" style="width: 30%;">Key</th>
                            <th class="col" style="width: 30%;">Value</th>
                            <th class="col" style="width: 30%;">Categories</th>
                            <th class="col" style="width: 10%;"></th>
                        </tr>
                    </thead>
                    <tbody style="height: 35vh;">
                        @foreach (var word in words)
                        {
                            @if (IsWordMatchingFilter(word))
                            {
                                <tr>
                                    <td class="col" style="width: 30%;">@word.Word.KeyWord</td>
                                    <td class="col" style="width: 30%;">@word.Word.ValueWord</td>
                                    <td class="col" style="width: 30%;">@GetWordCategoriesToString(word)</td>
                                    <td class="col" style="width: 10%;">
                                        <button class="waves-effect waves-light btn-flat" @onclick="() => wordEditModal.Open(word)">Edit</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div style="height: 30px;"></div>
                <div class="row">
                    <EditForm Model="wordEdit" OnValidSubmit="OnWordAdd">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <h5>Add a new word</h5>
                        <div class="row">
                            <div class="col s4">
                                <div class="input-field">
                                    <input placeholder="Key" id="word_key" type="text" class="validate" @bind="wordEdit.KeyWord" autocomplete="off">
                                </div>
                            </div>
                            <div class="col s4">
                                <div class="input-field">
                                    <input placeholder="Value" id="word_value" type="text" class="validate" @bind="wordEdit.ValueWord" autocomplete="off">
                                </div>
                            </div>
                            <div class="col s4">
                                <div class="input-field">
                                    <select id="word_initial_category" @bind="wordEditInitialCategory">
                                        <option value="0" disabled selected>Category</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Category.Id">@category.Category.Title</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-large waves-effect waves-light">Create</button>
                    </EditForm>
                </div>
            </div>
            <div class="col s4" style="padding: 30px;">
                <h3>Categories</h3>
                <div style="height: 20px;"></div>
                <table class="striped">
                    <thead>
                        <tr>
                            <th class="col" style="width: 40%;">Title</th>
                            <th class="col" style="width: 40%;">Word count</th>
                            <th class="col" style="width: 20%;"></th>
                        </tr>
                    </thead>
                    <tbody style="height: 35vh;">
                        @foreach (var category in categories)
                        {
                            @if (IsCategoryMatchingFilter(category))
                            {
                                <tr>
                                    <td class="col" style="width: 40%;">@category.Category.Title</td>
                                    <td class="col" style="width: 40%;">@category.WordCount</td>
                                    <td class="col" style="width: 20%;">
                                        <button class="waves-effect waves-light btn-flat" @onclick="() => categoryEditModal.Open(category.Category)">Edit</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div style="height: 30px;"></div>
                <div class="row">
                    <EditForm Model="categoryEdit" OnValidSubmit="OnCategoryAdd">
                        <h5>Add a new category</h5>
                        <div class="row">
                            <div class="col s12">
                                <div class="input-field">
                                    <input placeholder="Title" id="category_title" type="text" class="validate" @bind="categoryEdit.Title" autocomplete="off">
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-large waves-effect waves-light">Create</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <ManageCategoryEditModal @ref="categoryEditModal" OnCategoryEditSave="OnCategoryEdit" OnCategoryEditDelete="OnCategoryDelete"></ManageCategoryEditModal>
    <ManageWordEditModal @ref="wordEditModal" Categories="categories" OnWordEditSave="OnWordEdit" OnWordEditDelete="OnWordDelete"></ManageWordEditModal>
}




@code {

    private bool isPageLoaded = false;
    private List<CategoryVM> categories = new List<CategoryVM>();
    private string inputCategoryTitle = "";
    private Category categoryEdit = new Category();
    private List<WordVM> words = new List<WordVM>();
    private string inputWordKey = "";
    private string inputWordValue = "";
    private int inputWordCategory = 0;
    private Word wordEdit = new Word();
    private int wordEditInitialCategory = 0;
    private ManageCategoryEditModal categoryEditModal;
    private ManageWordEditModal wordEditModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        words = await WordService.Get(new List<int>(), "", "");
        categories = await CategoryService.Get();
        isPageLoaded = true;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeModals", new List<string>());
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_initial_category" });
    }

    private bool IsWordMatchingFilter(WordVM word)
    {
        return
            word.Word.KeyWord.ToLower().StartsWith(inputWordKey.ToLower()) &&
            word.Word.ValueWord.ToLower().Contains(inputWordValue.ToLower()) &&
            (inputWordCategory == 0 || word.Categories.Any(x => x.Id == inputWordCategory));
    }

    private string GetWordCategoriesToString(WordVM word)
    {
        return string.Join(", ", word.Categories.Select(x => x.Title));
    }

    private async Task OnWordAdd()
    {
        var word = await WordService.Create(wordEdit);
        await WordService.UpdateCategories(new WordCategoryVM { WordId = word.Id, CategoryIds = new List<int> { wordEditInitialCategory } });
        wordEdit = new Word();
        wordEditInitialCategory = 0;
        words = await WordService.Get(new List<int>(), "", "");
        categories = await CategoryService.Get();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_initial_category" });
    }

    private async Task OnWordEdit(WordVM word)
    {
        _ = await WordService.Update(word.Word);
        await WordService.UpdateCategories(new WordCategoryVM { WordId = word.Word.Id, CategoryIds = word.Categories.Select(x => x.Id).ToList() });
        words = await WordService.Get(new List<int>(), "", "");
        categories = await CategoryService.Get();
        StateHasChanged();
    }

    private async Task OnWordDelete(WordVM word)
    {
        await WordService.Delete(word.Word.Id);
        words = await WordService.Get(new List<int>(), "", "");
        categories = await CategoryService.Get();
        StateHasChanged();
    }

    private bool IsCategoryMatchingFilter(CategoryVM category)
    {
        return category.Category.Title.ToLower().StartsWith(inputCategoryTitle.ToLower());
    }

    private async Task OnCategoryAdd()
    {
        _ = await CategoryService.Create(categoryEdit);
        categoryEdit = new Category();
        categories = await CategoryService.Get();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_initial_category" });
    }

    private async Task OnCategoryEdit(Category category)
    {
        _ = await CategoryService.Update(category);
        categories = await CategoryService.Get();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_initial_category" });
    }

    private async Task OnCategoryDelete(Category category)
    {
        await CategoryService.Delete(category.Id);
        categories = await CategoryService.Get();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_initial_category" });
    }

}
