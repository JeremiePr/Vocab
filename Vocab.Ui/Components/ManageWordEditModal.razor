@inject IJSRuntime JSRuntime

@if (isComponentLoaded)
{
    <div id="modal_word_edit" class="modal modal-fixed-footer" style="width: 500px; height: 600px;">
        <EditForm Model="word" OnValidSubmit="OnSaveClick">
            <div class="modal-content">
                <h4>Edit word</h4>
                <div style="height: 40px;"></div>
                <label>Key</label>
                <div class="input-field">
                    <input placeholder="Key" id="word_keyword" type="text" class="validate" @bind="word.Word.KeyWord">
                </div>
                <label>Value</label>
                <div class="input-field">
                    <input placeholder="Value" id="word_valueword" type="text" class="validate" @bind="word.Word.ValueWord">
                </div>
                <label>Categories</label>
                <div style="height: 16px;"></div>
                <select id="word_category" @bind="WordCategoryId" style="max-height: 400px; overflow-y: auto">
                    <option value="0" disabled selected>Add category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Category.Id">@category.Category.Title</option>
                    }
                </select>
                <div style="height: 10px;"></div>
                @foreach (var category in word.Categories)
                {
                    <div class="chip">
                        @category.Title
                        <i class="chip-category-close-btn material-icons" @onclick="() => OnCategoryRemoveClick(category)">close</i>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="modal-close waves-effect waves-purple btn-flat">Back</button>
                <button class="modal-close waves-effect waves-ripple btn red" @onclick="OnDeleteClick">Delete<i class="material-icons right">delete</i></button>
                <button class="modal-close waves-effect btn" type="submit">Save<i class="material-icons right">save</i></button>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter] public List<CategoryVM> Categories { get; set; } = new List<CategoryVM>();
    [Parameter] public EventCallback<WordVM> OnWordEditSave { get; set; }
    [Parameter] public EventCallback<WordVM> OnWordEditDelete { get; set; }

    private int wordCategoryId = 0;
    public int WordCategoryId
    {
        get => wordCategoryId;
        set
        {
            wordCategoryId = value;
            _ = OnCategoryClick();
        }
    }

    private bool isComponentLoaded = false;
    private WordVM word = new WordVM { Word = new Word(), Categories = new List<Category>() };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        isComponentLoaded = true;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeModals", new List<string> { "#modal_word_edit" });
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_category" });
    }

    public async Task Open(WordVM word)
    {
        this.word = new WordVM
        {
            Word = new Word
            {
                Id = word.Word.Id,
                IsActive = word.Word.IsActive,
                KeyWord = word.Word.KeyWord,
                ValueWord = word.Word.ValueWord
            },
            Categories = word.Categories.Select(x => new Category { Id = x.Id, IsActive = x.IsActive, Title = x.Title }).ToList()
        };
        wordCategoryId = 0;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openModal", "#modal_word_edit");
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_category" });
    }

    private async Task OnCategoryClick()
    {
        if (wordCategoryId == 0 || word.Categories.Any(x => x.Id == wordCategoryId)) return;
        var category = Categories.FirstOrDefault(x => x.Category.Id == wordCategoryId)?.Category;
        if (category == null) return;
        word.Categories.Add(category);
        wordCategoryId = 0;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeDropdowns", new List<string> { "#word_category" });
    }

    private void OnCategoryRemoveClick(Category category)
    {
        word.Categories = word.Categories.Where(x => x.Id != category.Id).ToList();
        StateHasChanged();
    }

    private async Task OnSaveClick()
    {
        await OnWordEditSave.InvokeAsync(word);
    }

    private async Task OnDeleteClick()
    {
        await OnWordEditDelete.InvokeAsync(word);
    }
}
