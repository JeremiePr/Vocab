@inject IJSRuntime JSRuntime

@if (isComponentLoaded)
{
    <div id="modal_category_edit" class="modal modal-fixed-footer" style="width: 500px; height: 350px;">
        <EditForm Model="category" OnValidSubmit="OnSaveClick">
            <div class="modal-content">
                <h4>Edit category</h4>
                <div style="height: 40px;"></div>
                <label>Title</label>
                <div class="input-field col s6">
                    <input placeholder="Title" id="category_title" type="text" class="validate" @bind="category.Title">
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-close waves-effect waves-purple btn-flat">Back</button>
                <button class="modal-close waves-effect waves-ripple btn red" @onclick="OnDeleteClick">Delete<i class="material-icons right">delete</i></button>
                <button class="modal-close waves-effect btn" type="submit">Save<i class="material-icons right">save</i></button>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter] public EventCallback<Category> OnCategoryEditSave { get; set; }
    [Parameter] public EventCallback<Category> OnCategoryEditDelete { get; set; }

    private bool isComponentLoaded = false;
    private Category category = new Category();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        isComponentLoaded = true;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("initializeModals", new List<string> { "#modal_category_edit" });
    }

    public async Task Open(Category category)
    {
        this.category = new Category
        {
            Id = category.Id,
            IsActive = category.IsActive,
            Title = category.Title
        };
        await JSRuntime.InvokeVoidAsync("openModal", "#modal_category_edit");
    }

    private async Task OnSaveClick()
    {
        await OnCategoryEditSave.InvokeAsync(category);
    }

    private async Task OnDeleteClick()
    {
        await OnCategoryEditDelete.InvokeAsync(category);
    }
}
