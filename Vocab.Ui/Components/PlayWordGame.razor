@inject IWordService WordService


@if (isComponentLoaded)
{
    <div class="main-container">
        @if (items.Any() && index < items.Count())
        {
            <div class="row">
                <h3>@items[index].Question</h3>
            </div>
            <div class="row" style="height: 80px;">
                @if (isWordHidden)
                {
                    <button class="btn-flat waves-effect waves-purple" @onclick="() => isWordHidden = false">Reveal</button>
                }
                else
                {
                    <h5>@items[index].Answer</h5>
                }
            </div>
            <div style="height: 20px;"></div>
            <div class="row">
                <button class="btn btn-large waves-effect waves-light" @onclick="OnNextClick">Next<i class="material-icons right">navigate_next</i></button>
            </div>
        }
    </div>
}




@code {

    [Parameter] public GameSettings Settings { get; set; }
    [Parameter] public bool AllCategories { get; set; }
    [Parameter] public EventCallback OnGameEnded { get; set; }

    private bool isComponentLoaded = false;
    private List<GameItem> items = new List<GameItem>();
    private int index = 0;
    private bool isWordHidden = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadWords();
        isComponentLoaded = true;
        StateHasChanged();
    }

    private async Task LoadWords()
    {
        index = 0;
        isWordHidden = true;

        var words = await WordService.Get(Settings.CategoryIds, string.Empty, string.Empty);

        var collection = Settings.WordDirection switch
        {
            WordDirections.Forward => words.Select(x => new GameItem { Question = x.Word.KeyWord, Answer = x.Word.ValueWord }),
            WordDirections.Backward => words.Select(x => new GameItem { Question = x.Word.ValueWord, Answer = x.Word.KeyWord }),
            WordDirections.All => words.Select(x => new GameItem { Question = x.Word.KeyWord, Answer = x.Word.ValueWord })
                .Concat(words.Select(x => new GameItem { Question = x.Word.ValueWord, Answer = x.Word.KeyWord })),
            _ => throw new Exception($"Expected a valid value from type '{nameof(WordDirections)}'")
        };

        var random = new Random();

        items = collection.OrderBy(x => random.Next()).ToList();
    }

    private async Task OnNextClick()
    {
        index++;
        isWordHidden = true;
        if (index == items.Count())
        {
            await OnListEnding();
        }
    }

    private async Task OnListEnding()
    {
        if (Settings.LoopRetry)
        {
            index = 0;
            var random = new Random();
            items = items.OrderBy(x => random.Next()).ToList();
        }
        else
        {
            await OnGameEnded.InvokeAsync();
        }
    }
}
